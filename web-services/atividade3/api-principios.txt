Os 6 princípios da REST que orientam o design de APIs são:

1. Cliente-Servidor: Cliente e Servidor devem ser isolados um do outro e ter permissão para desenvolver de forma independente. Com isso melhora a capacidade de gerenciamento em várias plataformas e aumenta escalabilidade. As preocupações com a interface do Cliente ficam separadas das com os dados do Servidor.
2. Stateless: Cada requisição acionada entre a comunicação Cliente-Servidor deve possuir toda a informação necessária e compreensível para realizar a origem da requisição, não sendo de responsabilidade do servidor armazenar qualquer tipo de contexto. Em outras palavras, cada solicitação enviada do Cliente ao Servidor deve incluir todas as informações necessárias para compreender a solicitação.
3. Cache: Utilizado para melhorar a performance de comunicação entre aplicações, otimizando o tempo de resposta  na comunicação entre Cliente-Servidor. De acordo com este princípio de design de API, os dados em uma resposta devem ser indiretamente ou categorizados como armazenáveis ​​ou não armazenáveis ​​em cache. Se uma resposta puder ser armazenada em cache, o cache do Cliente terá o direito de reciclar os dados de resposta para solicitações semelhantes no futuro.
4. Interface Uniforme: Este princípio de design otimiza toda a arquitetura do sistema e aumenta a visibilidade das comunicações. Para obter uma interface uniforme, vários controles de arquitetura são necessários para orientar o desempenho dos elementos dentro da arquitetura da API REST. Os princípios REST são definidos por quatro controles de interface, incluindo identificação de recursos, gerenciamento de recursos por meio de representações, comunicações autodescritivas e hipermídia como mecanismo do estado do aplicativo.
5. Sistema em camadas: A arquitetura da API REST inclui várias camadas que operam juntas para construir uma hierarquia que ajuda a gerar um aplicativo mais escalável e flexível. Devido ao seu sistema em camadas, um aplicativo tem melhor segurança, pois os componentes em cada camada não podem interagir fora da camada subsequente. Um sistema de arquitetura REST API em camadas tem maior estabilidade porque restringe o desempenho do componente. de modo que cada componente não pode "ver" além da camada imediata com a qual está se misturando.
6. Código sob demanda: Esse princípio REST permite que codificação ou applets sejam comunicados por meio da API usada no aplicativo. Uma definição da API REST permite estender a funcionalidade do cliente baixando e implementando a codificação na forma de applets ou scripts. Isso simplifica os clientes, diminuindo o número de recursos essenciais a serem pré-implementados.